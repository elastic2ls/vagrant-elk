input {
	file {
		path => "/vagrant/logs/gatling-test-result.log"
		#path => "/vagrant/logs/gatling-small.log"
		start_position => "beginning"
		type => "gatling"
	}
}

filter {
	grok {
		patterns_dir => "/vagrant/configs-elk/patterns"
		match => [ "message", "%{GATLING}"]
		remove_field  => ["message"]
	}	 

	#ignor start and end events since they don't have any more information
	if [testType] == "START" or [testType] == "END" {
    drop { } 
  }

	date {
		match => ["requestStart", "UNIX_MS"]
		target => ["@timestamp"]
		remove_field => ["requestStart"]
	}
	if [requestEnd] == "0" { 
		mutate {
			remove_field => ["requestEnd"]
		}
	}else{
		date {
			match => ["requestEnd", "UNIX_MS"]
			target => ["requestEnd"]
		}
		#calculate duration
		ruby {
			code => "event['requestDuration'] = (event['requestEnd'] - event['@timestamp']) * 1000 rescue nil"
		}
	}
	date {
		match => ["responseStart", "UNIX_MS"]
		target => ["responseStart"]
	}
	date {
		match => ["responseEnd", "UNIX_MS"]
		target => ["responseEnd"]
	}
	
	#calculate duration
	if [responseEnd]{
		ruby {
			code => "event['responseDuration'] = (event['responseEnd'] - event['responseStart']) * 1000 rescue nil"
		}
		ruby {
			code => "event['responseLatency'] = (event['responseStart'] - event['requestEnd']) * 1000 rescue nil"
		}
		ruby {
			code => "event['fullDuration'] = (event['responseEnd'] - event['@timestamp']) * 1000 rescue nil"
		}
		mutate {
			convert => ["requestDuration", "integer"]
			convert => ["responseDuration", "integer"]
			convert => ["responseLatency", "integer"]
			convert => ["fullDuration", "integer"]
			remove_field => [ "requestEnd", "responseStart", "responseEnd" ]
		}
	}
}

output {
	elasticsearch {
		host => localhost
	}
	stdout {
		codec => rubydebug
	}
}